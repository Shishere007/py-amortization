from py_amortization import AmortizationSchedule
from py_amortization.payment_frequency import PaymentFrequency as PF
from tests.base import Base


class TestAmortizationSchedule(Base):

    def setUp(self) -> None:
        self.principal = 1000
        self.apr = 3/100
        self.instance = AmortizationSchedule(self.principal, self.apr)

        self.result_map = {
            PF.MONHTLY: [
                (1, 84.69, 2.5, 82.19, 917.81),
                (2, 84.69, 2.29, 82.4, 835.41),
                (3, 84.69, 2.09, 82.6, 752.81),
                (4, 84.69, 1.88, 82.81, 670.0),
                (5, 84.69, 1.68, 83.01, 586.99),
                (6, 84.69, 1.47, 83.22, 503.77),
                (7, 84.69, 1.26, 83.43, 420.34),
                (8, 84.69, 1.05, 83.64, 336.7),
                (9, 84.69, 0.84, 83.85, 252.85),
                (10, 84.69, 0.63, 84.06, 168.79),
                (11, 84.69, 0.42, 84.27, 84.52),
                (12, 84.73, 0.21, 84.52, 0)
            ],
            PF.SEMI_MONHTLY: [
                (1, 42.32, 1.25, 41.07, 958.93),
                (2, 42.32, 1.2, 41.12, 917.81),
                (3, 42.32, 1.15, 41.17, 876.64),
                (4, 42.32, 1.1, 41.22, 835.42),
                (5, 42.32, 1.04, 41.28, 794.14),
                (6, 42.32, 0.99, 41.33, 752.81),
                (7, 42.32, 0.94, 41.38, 711.43),
                (8, 42.32, 0.89, 41.43, 670.0),
                (9, 42.32, 0.84, 41.48, 628.52),
                (10, 42.32, 0.79, 41.53, 586.99),
                (11, 42.32, 0.73, 41.59, 545.4),
                (12, 42.32, 0.68, 41.64, 503.76),
                (13, 42.32, 0.63, 41.69, 462.07),
                (14, 42.32, 0.58, 41.74, 420.33),
                (15, 42.32, 0.53, 41.79, 378.54),
                (16, 42.32, 0.47, 41.85, 336.69),
                (17, 42.32, 0.42, 41.9, 294.79),
                (18, 42.32, 0.37, 41.95, 252.84),
                (19, 42.32, 0.32, 42.0, 210.84),
                (20, 42.32, 0.26, 42.06, 168.78),
                (21, 42.32, 0.21, 42.11, 126.67),
                (22, 42.32, 0.16, 42.16, 84.51),
                (23, 42.32, 0.11, 42.21, 42.3),
                (24, 42.35, 0.05, 42.3, 0)
            ],
            PF.BI_WEEKLY: [
                (1, 39.06, 1.15, 37.91, 962.09),
                (2, 39.06, 1.11, 37.95, 924.14),
                (3, 39.06, 1.07, 37.99, 886.15),
                (4, 39.06, 1.02, 38.04, 848.11),
                (5, 39.06, 0.98, 38.08, 810.03),
                (6, 39.06, 0.93, 38.13, 771.9),
                (7, 39.06, 0.89, 38.17, 733.73),
                (8, 39.06, 0.85, 38.21, 695.52),
                (9, 39.06, 0.8, 38.26, 657.26),
                (10, 39.06, 0.76, 38.3, 618.96),
                (11, 39.06, 0.71, 38.35, 580.61),
                (12, 39.06, 0.67, 38.39, 542.22),
                (13, 39.06, 0.63, 38.43, 503.79),
                (14, 39.06, 0.58, 38.48, 465.31),
                (15, 39.06, 0.54, 38.52, 426.79),
                (16, 39.06, 0.49, 38.57, 388.22),
                (17, 39.06, 0.45, 38.61, 349.61),
                (18, 39.06, 0.4, 38.66, 310.95),
                (19, 39.06, 0.36, 38.7, 272.25),
                (20, 39.06, 0.31, 38.75, 233.5),
                (21, 39.06, 0.27, 38.79, 194.71),
                (22, 39.06, 0.22, 38.84, 155.87),
                (23, 39.06, 0.18, 38.88, 116.99),
                (24, 39.06, 0.13, 38.93, 78.06),
                (25, 39.06, 0.09, 38.97, 39.09),
                (26, 39.14, 0.05, 39.09, 0)
            ],
            PF.WEEKLY: [
                (1, 100.32, 0.58, 99.74, 900.26),
                (2, 100.32, 0.52, 99.8, 800.46),
                (3, 100.32, 0.46, 99.86, 700.6),
                (4, 100.32, 0.4, 99.92, 600.68),
                (5, 100.32, 0.35, 99.97, 500.71),
                (6, 100.32, 0.29, 100.03, 400.68),
                (7, 100.32, 0.23, 100.09, 300.59),
                (8, 100.32, 0.17, 100.15, 200.44),
                (9, 100.32, 0.12, 100.2, 100.24),
                (10, 100.3, 0.06, 100.24, 0)
            ],
            PF.DAILY: [
                (1, 100.05, 0.08, 99.97, 900.03),
                (2, 100.05, 0.07, 99.98, 800.05),
                (3, 100.05, 0.07, 99.98, 700.07),
                (4, 100.05, 0.06, 99.99, 600.08),
                (5, 100.05, 0.05, 100.0, 500.08),
                (6, 100.05, 0.04, 100.01, 400.07),
                (7, 100.05, 0.03, 100.02, 300.05),
                (8, 100.05, 0.02, 100.03, 200.02),
                (9, 100.05, 0.02, 100.03, 99.99),
                (10, 100.0, 0.01, 99.99, 0)
            ],
            PF.BI_MONTHLY: [
                (1, 169.6, 5.0, 164.6, 835.4),
                (2, 169.6, 4.18, 165.42, 669.98),
                (3, 169.6, 3.35, 166.25, 503.73),
                (4, 169.6, 2.52, 167.08, 336.65),
                (5, 169.6, 1.68, 167.92, 168.73),
                (6, 169.57, 0.84, 168.73, 0)
            ],
            PF.QUARTERLY: [
                (1, 254.71, 7.5, 247.21, 752.79),
                (2, 254.71, 5.65, 249.06, 503.73),
                (3, 254.71, 3.78, 250.93, 252.8),
                (4, 254.7, 1.9, 252.8, 0)
            ],
            PF.SEMI_ANNUAL: [
                (1, 511.28, 15.0, 496.28, 503.72),
                (2, 511.28, 7.56, 503.72, 0)
            ],
            PF.ANNUAL: [(1, 1030.0, 30.0, 1000, 0)],
        }

        self._param_remap_types = [
            PF.DAILY, PF.WEEKLY
        ]

    def get_instance(self) -> AmortizationSchedule:
        return self.instance
    
    def get_params(self, param: int) -> dict:
        if param in [PF.DAILY, PF.WEEKLY]:
            param = 10
        return {'period': param, 'as_dict': False, 'as_iter': False}

    def get_result(self, param: int):
        return self.result_map[param]